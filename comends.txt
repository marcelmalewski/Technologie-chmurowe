Zmiany w images:
  jezeli zrobie zmiane trzeba jeszcze raz build (np. nginx przy zmianie konfiguracji)
  mozna tez usunac image (moze czasem volume) i stworzy sie sam nowy
  albo z opcja przebudowania na nowo
  docker-compose up --build

Zanim uruchomich docker-compose
 # lokalny test 
 docker build -f Dockerfile .

 docker run nazwa_utworzonego_kontenera


Images:
  # tworzenie image
  docker pull image_name

  # tworzenie image  pod publishowanie na docker hub
    docker build -t nazwa_na_dockHubie/nazwa-repo:nazwa_image
    docker build -t 6745345/my-first-docker-repository-labs:first .
  
  # publishowanie na dockerhub
    docker push nazwa_na_dockHubie/nazwa-repo:nazwa_image
    docker push 6745345/my-first-docker-repository-labs:first

  # tworzenie z wlasna nazwą
  docker build -t nazwa_image .
  
  # usuwanie pojedynczo image
  docker image rm image_name
  
  # usuwanie nie uzywanych images
  docker image prune
  
Containers:
  # tworzenie container wykorzystuje image (hello-world) gdy go nie ma jest tworzony
  docker run image_name

  # tworzenie i wywolanie komendy np. sh
  docker run image_name sh

  # uruchamianie container
  docker start container_name

  # uruchamianie gdy chchemy zobaczy co wypisuje sie w systemi na ktorym stoin container
  docker start -a container_name

  # uruchamianie na danym porcie
  # mapujemy port 4200 na naszym komputerze na port 80 w kontenerze
    docker run --name nazwa -d -p 4200:80 nazwa_image
    docker run -p 8080:8080 sha256:fe90d5aacba00ff827f6f549882148b3a0df7b610ae9aa0d0d4f37f420d7dcf4

  # -d 
  By design, containers started in detached mode exit when the 
  root process used to run the container exits, unless you also specify the --rm option

  # zatrzymywanie containera
  docker stop container_name
  
  # usuwanie containera
  docker rm container_name
  
  # usuwanie wszystkich nie uzywanych containers
  docker container prune

  # wypisywanie wszystkich kontenerów
  docker ps -a

Busy busybox
  # co robi -it
  łączymy input i output z command line kontenera do nas do terminala

  # dodanie tego sh w przypadku "docker create --name my_container busybox echo Hello world from my container") ?

  # start busyboxa tak zeby byl wloczny (ale zeby to bylo mozliwe przy run musi byc -it sh)
  # albo musi byc dodane potem sh !!!
  docker start container_name
  docker start -a container_name
  docker run -it busybox sh

  # dodanie do sieci
  --network nazwa_sieci

  # --rm ?

  # stworzenie i wejsce do sh (puki tam jestesmy jest wloczony)
  docker run -it busybox sh

  # tworzeni z nazwą
  docker run -it --name nazwa busybox sh

  # wypisanie przy tworznieu hello world, ale cos dziwnego sie wtedy dzieje
  docker run busybox echo hello world

  # wypisywanie logow kontenera
  docker logs container_name

  # uruchmoienie komendy na urucgomionym kontenerze np. sh
  docker exec -it container_name sh

  # tworzenie pliku za pomoca exec
  docker exec admiring_varahamihira sh -c "echo 'Created from outside' > createdFile.txt"

  # tworzenie pliku
  echo "My first file" > readme.txt

  # (docker create) tworzenie kontenera z nazwą ktory z -a wypisuje cos konkretnego
  docker create --name my_container busybox echo Hello world from my container

  
Ogólne:
  # usuwanie nieuzywanych images, containers, networks
  docker system prune
  
  # usuwanie nieuzyawnych networks
  docker network prune

Sieci:
 # pokazuje sieci ktore mamy
 docker network ls

 # zaglada do konkretnej sieci 
 # np widizmy podpiente kontenery
 docker network inspect nazwa_sieci

 # tworzenie sieci
 docker network create nazwa_sieci

Plecenia w sh:
  # sprawdz siec 
  ip addr

Push new image to reposritory on git hub:
  docker tag local-image:tagname new-repo:tagname
  docker push new-repo:tagname
