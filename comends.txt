DOCKER-COMPOSE---------------------------------------------------------------------------------------------------------
  # KOMENDY
    docker-compose up

    docker-compose up -d

    docker-compose stop

    docker-compose down --volumes

  # ODPALANIE KONTENEROW PO KOLEI
  depends_on:
      - postgresDB
      - myredis

  # lokalny test chyba ze jest "Dockerfile.dev" to trzeba z tym ".dev"
    docker build -f Dockerfile .
    docker run nazwa_utworzonego_kontenera

  # TESTOWANIE API
  route.rest, w lab5 jest przykład
    # NGINX
      wystarczy localhost i port ktory wystawia nginx, resztą zajmuje się nginx

DOCKERFILE / URUCHAMIANIE---------------------------------------------------------------------------------------------------------
  # jestem w folderze gdzie jest dockerfile, kropka jest ważna
  # wtedy nazwa dockerfile to musi być "Dockerfile" bez .dev
  # powstanie wtedy image
    docker build -t nazwa_image .

  # urchamianie image, trzeba pamietac o porcia na ktorym dziala api
  # co sie dzieje w kontenerze mozna odpalić apke docker i kliknąć kontener
  # z tym portem nie zawsze jest potrzebne
    docker run --name nazwa_kontenera -d -p 4000:4000 nazwa_image

  # NPM
    RUN npm install

    COPY . .

    CMD ["npm", "run", "start"]

  # YARN
    RUN yarn install

    COPY . .

    CMD ["yarn", "start"]


DEBUGOWANIE:---------------------------------------------------------------------------------------------------------
  Zmiany w images:---------------------------------------------------------------------------------------------------------
    jezeli zrobie zmiane trzeba jeszcze raz build (np. nginx przy zmianie konfiguracji)
    mozna tez usunac image (moze czasem volume) i stworzy sie sam nowy
    albo z opcja przebudowania na nowo
    docker-compose up --build

  jak cos nie działa w docker-compose
    usunac stworzone wczesniej images bo mozliwe ze on nie widzi zmiany w pliku
    on nie widzi tej zmiany i trzeba jeszce raz build image
    bedą tu potrzebne volumy itd.

  VOLUMENY
    # CZY w dockerfile to sie zgadza
      WORKDIR '/app'
      WORKDIR /app

ACCES HOST PORTS FROM CONTAINER:---------------------------------------------------------------------------------------------------------
  # używamy 'host.docker.internal' zmiast 'localhost' i '127.0.0.1'
    1. host: process.env.REDIS_HOST || 'host.docker.internal'
    2. host: process.env.postgresHost || "host.docker.internal"

IMAGES:---------------------------------------------------------------------------------------------------------
  # POBIERANIE image
    docker pull image_name

  # TWORZENIE Z DOCKERFILE z wlasna nazwą
    docker build -t nazwa_image .

  # TWORZENIE Z DOCKERFILE pod PUBLISHOWANIE na docker hub
    docker build -t nazwa_na_dockHubie/nazwa-repo:nazwa_image
    docker build -t 6745345/my-first-docker-repository-labs:first .
  
  # USUWANIE pojedynczo image
    docker image rm image_name
  
  # USUWANIE This will remove all dangling images.
    docker image prune

  # PUBLISHOWANIE na dockerhub
    docker push nazwa_na_dockHubie/nazwa-repo:nazwa_image
    docker push 6745345/my-first-docker-repository-labs:first
  
CONTAINERS:---------------------------------------------------------------------------------------------------------
  # TWORZENIE container wykorzystuje image gdy go nie ma jest docker próbuje go pobrać
    docker run image_name

  # TWORZENIE i wejscie do terminala
    docker run image_name sh

  # TWORZENIE  i dodanie do sieci
  docker run --network nazwa_sieci nazwa_image

  # TWORZENIE z argumentem "-p"
  # mapujemy port 4200 na naszym komputerze na port 80 w kontenerze
  # mapowanie: host : container
    docker run -p 4200:80 nazwa_image

  # TWORZENIE atrybut "-d"
  # nie widzimy tego co sie wypisuje przy buildowaniu
  # By design, containers started in detached mode exit when the 
  # root process used to run the container exits, unless you also specify the --rm option
    docker run --name nazwa -d -p 4200:80 nazwa_image

  # TWORZENIE atrybut "--name"
    docker run --name nazwa_kontenera nazwa_image

  # TWORZENIE atrybut "-it"
  # uruchamia powłokę systemową kontenera.
    docker run -it nazwa_image

  # UŻYCIE KOMENDY przy TWORZENIU kontenera
    docker run nazwa_image echo hello world

  # DOCKER CREATE, tworzenie kontenera z nazwą ktory z -a wypisuje cos konkretnego
  docker create --name my_container nazwa_image echo Hello world from my container

  ------------------------------------------

  # URUCHAMIANIE container
    docker start container_name

  # URUCHAMIANIE kontenera, atrybut "-a"
  # gdy chchemy zobaczy co wypisuje sie w systemi na ktorym stoin container
    docker start -a container_name
  
  # URUCHAMIANIE komendy na URUCHAMIONYM kontenerze np. sh
    docker exec -it container_name sh

  ------------------------------------------

  # ZATRZYMYWANIE containera
    docker stop container_name
  
  ------------------------------------------
  
  # USUWANIE containera
    docker rm container_name
  
  # USUWANIE This will remove all stopped containers.
    docker container prune

  ------------------------------------------

  # WYŚWIETLANIE wszystkich kontenerów
    docker ps -a

  # WYŚWIETLANIE logow kontenera
    docker logs container_name

  # DODAWANIE DO SIECI
    docker network connect nazwa_sieci nazwa_kontenera

  # OTWORZENIE TERMINALA w uruchomionych kontenerze (dodajemy sh)
    docker exec -it test sh

    # TERMINAL stworzenie pliku z textem
      echo "My first file" > readme.txt

    # TERMINAL sprawdzenie zawartosci pliku
      cat readme.txt
    
    # TERMINAL wypisanie czegos
      eche hello

  # TWORZENIE pliku za pomoca exec poza terminalem
    docker exec nazwa_kontenera sh -c "echo 'Created from outside' > createdFile.txt"

VOLUMENS:---------------------------------------------------------------------------------------------------------
  # tworzenia kontenera z volumenem np. zapisane są tam ustawienia postgresa
    docker run -v C:\Users\mmale\Repozytoria\chmurowe\lab5\postgres\data:/var/lib/postgresql/data --name postgres-db -e POSTGRES_PASSWORD=mypassword -e POSTGRES_USER=myuser -e POSTGRES_DB=mydb -p 5432:5432 -d postgres

  # kontener z voulmenami
    docker run -v /opt/app/node_modules -v (pełna ścieżka):/opt/app -p 4000:3000 nazwa image

KONTENER Z POSTGRESEM:---------------------------------------------------------------------------------------------------------
    # docker-compose
      environment:
        POSTGRES_USER: myuser
        POSTGRES_PASSWORD: mypassword
        POSTGRES_DB: mydb

    # uruchomienie contenera z wejsciem do basha
      docker exec -it postgres-db bash

    # logowanie sie do postgresa
      psql -d mydb -U myuser

    # tworznie podstawowej tabeli
      CREATE TABLE IF NOT EXISTS accounts (
         id serial PRIMARY KEY,
         username VARCHAR (255) UNIQUE NOT NULL
      );

    # dodanie do niej przykładowych wartosci
      INSERT INTO accounts(username) VALUES 
      ('rick'), ('morty') RETURNING *;

    # wyswietlanie jej
      1. \dt
      2. select * from accounts;

BUSYBOX---------------------------------------------------------------------------------------------------------
  # TWORZENIE/URUCHAMIANIE kontenera tak zeby był uruchomiony i był w terminalu
  # używamy argument -it
  # łączymy input i output z command line kontenera do nas do terminala
    docker run -it busybox (chyba to wystarczy) (busy box domyślnie dodaje "sh")
    docker run -it busybox sh

  # TWORZENIE/URUCHAMIANIE kontenera tak zeby był uruchomiony i żeby nie był w terminalu
  # można sprobować -id
  # wtedy nie wchodzi do terminala a też zostaje włączony
    docker run -id busybox
  
Ogólne:---------------------------------------------------------------------------------------------------------
  # USUWANIE Remove all unused containers, networks, images (both dangling and unreferenced), and optionally, volumes
    docker system prune

  # gitignore w dockerze (POWINNO SIE DODAWAC)
    .dockerignore

SIECI:---------------------------------------------------------------------------------------------------------
  # TWORZENIE sieci
    docker network create nazwa_sieci

  # pokazuje sieci ktore mamy
    docker network ls

  # sprawdzanie DO JAKIEJ SIECI należy kontener
    docker inspect container_name -f "{{json .NetworkSettings.Networks }}"

  # zaglada do konkretnej sieci 
  # np widizmy podpiente kontenery w "containers"
    docker network inspect nazwa_sieci

  # USUWANIE nieużywanych sieci
    docker network prune

  # odlączanie od sieci
    docker network disconnect nazwa_sieci nazwa_kontenera

POLECENIA W SH:---------------------------------------------------------------------------------------------------------
  # sprawdz siec 
    ip addr

Push new image to reposritory on git hub:---------------------------------------------------------------------------------------------------------
  docker tag local-image:tagname new-repo:tagname
  docker push new-repo:tagname

TWORZNIE NODE:
  npm init -y
