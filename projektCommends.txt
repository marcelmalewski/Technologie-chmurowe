docker run -d -p 27017:27017 --name test-mongo mongo:latest
docker run --name some-redis -d -p 6379:6379 redis

kubectl status

mongo-user: mongouser
mongo-password: mongopassword

mongo, replicaset: 1 -> bo zeby baz było wiele to trzeba by było użyć statefulset

tworzenie image do backendu:
   1. docker build -t backend-image .
   2. docker tag backend-image 6745345/backend-image:Prod-1.0
   3. docker push 6745345/backend-image:Prod-1.0

tworzenie:
   1. kubectl apply -f mongo-config.yaml
   2. kubectl apply -f mongo-secret.yaml
   3. kubectl apply -f mongo.yaml
   4. kubectl apply -f backend.yaml
   5. kubectl get all

tworzenie redis:
   kubectl apply -f redis-conf.yaml
   kubectl apply -f redis.yaml

usuwanie:
   kubectl delete service backend-service
   kubectl delete deploy backend-deployment

tworzenie namespace:
  kubectl create -f namespace-prod.json
  kubectl get namespaces --show-labels


MONGO_HOST="127.0.0.1"
MONGO_PORT="27017"
MONGO_DATABASE="local"
PORT="5000"
REDIS_HOST="localhost"
REDIS_PORT="6379"

allkeys-lru -> The maxmemory-policy directive defines the procedure to be applied when the memory limit is reached. 
               allkeys-lru first removes the less recently used (LRU) keys.


włączone rzeczy:
   1. mongo i mongo service +
   2. mongo config +
   3. mongo secret +